
How It All Fits: Orchestrator, Agent, CLI, UI, and SDK

               [ CLI - npx @seyederick ]
                        |
         +--------------+--------------+
         |                             |
    [ SDK Plugin ]               [ Web UI Agent ]
         |                             |
         +--------------+--------------+
                        |
                [ Orchestrator Engine ]
        ┌───────────────┼────────────────┐
        │               │                │
 [ Memory Engine ]   [ Connectors ]   [ GPT-LLM ]


1. Add a memory-engine package to orchestrator monorepo

packages/memory-engine/index.ts

import { createClient } from '@supabase/supabase-js';
import { embedText } from './embedder';

const supabase = createClient(process.env.SUPABASE_URL!, process.env.SUPABASE_KEY!);

export async function saveMemory({ title, content, type = 'context', user_id }: {
  title: string;
  content: string;
  type?: string;
  user_id: string;
}) {
  const embedding = await embedText(content);
  return supabase.from('memory_entries').insert({
    title,
    content,
    memory_type: type,
    embedding,
    user_id
  });
}

export async function searchMemory(query: string, user_id: string) {
  const embedding = await embedText(query);
  const { data } = await supabase.rpc('match_memories', {
    query_embedding: embedding,
    match_threshold: 0.7,
    match_count: 5,
    user_id
  });
  return data;
}



2. Wire to Orchestrator

In orchestrator/index.ts:


import { saveMemory, searchMemory } from '@seyederick/memory-engine';

export async function orchestrate(input: string) {
  if (/recall.+client/i.test(input)) {
    const memories = await searchMemory("client onboarding process", "user-id-001");
    return memories;
  }

  if (/remember.+this/i.test(input)) {
    return saveMemory({
      title: "Meeting summary",
      content: input,
      type: "reference",
      user_id: "user-id-001"
    });
  }

  // fallback to connectors
}


SQL RPC: match_memories(query_embedding, match_threshold, match_count, user_id)

-- Enable pgvector if not already installed
CREATE EXTENSION IF NOT EXISTS vector;

-- RPC function for semantic memory search
CREATE OR REPLACE FUNCTION match_memories(
  query_embedding vector(1536),
  match_threshold float,
  match_count int,
  user_id text
)
RETURNS TABLE (
  id uuid,
  title text,
  content text,
  memory_type memory_type,
  relevance_score float,
  last_accessed timestamptz,
  tags text[],
  topic_id uuid
) LANGUAGE sql STABLE AS $$
  SELECT
    id,
    title,
    content,
    memory_type,
    1 - (embedding <=> query_embedding) AS relevance_score,
    last_accessed,
    tags,
    topic_id
  FROM memory_entries
  WHERE
    user_id = match_memories.user_id
    AND (embedding <=> query_embedding) > match_threshold
  ORDER BY embedding <=> query_embedding
  LIMIT match_count;
$$;




How to Apply It

In your Supabase SQL Editor:
	1.	Open your project
	2.	Go to SQL Editor → New Query
	3.	Paste and run the SQL above

Once applied, your SDK is ready to call this with:

supabase.rpc('match_memories', {
  query_embedding: await embedText(query),
  match_threshold: 0.75,
  match_count: 5,
  user_id: "demo-user"
})




Orchestrator parses:

{
  intent: "multi-step",
  actions: [
    { tool: "memory", action: "search", args: { query: "SEFTEC activity" } },
    { tool: "notion", action: "write", args: { content: "{{memoryResult}}" } }
  ]
}



Layer
Role
Interface
Orchestrator
Logic engine
Backend, CLI
Agent
Persona/response
UI + CLI
CLI
Local launcher
npx -y
SDK Plugin
Universal bridge
Any platform
Memory Engine
Persistent context
Supabase vector DB

name: Publish Packages

# Note: IDE may show false positives for 'secrets' context - this is valid GitHub Actions syntax
on:
  workflow_dispatch:
    inputs:
      package:
        description: 'Package to publish'
        required: true
        type: choice
        options:
          - cli
          - sdk
          - both
      version:
        description: 'Version to publish (e.g., 1.2.3)'
        required: true
      release_notes:
        description: 'Release notes (optional)'
        required: false

env:
  NODE_VERSION: '18'

jobs:
  publish-cli:
    name: Publish CLI to NPM
    runs-on: ubuntu-latest
    if: github.event.inputs.package == 'cli' || github.event.inputs.package == 'both'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: |
        cd cli
        bun install --frozen-lockfile

    - name: Update version
      run: |
        cd cli
        npm version ${{ github.event.inputs.version }} --no-git-tag-version

    - name: Build CLI
      run: |
        cd cli
        bun run build

    - name: Test CLI
      run: |
        cd cli
        bun link
        lanonasis --version
        lanonasis --help

    - name: Publish to NPM
      if: ${{ secrets.NPM_TOKEN }}
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        cd cli
        echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
        npm publish --access public
    
    - name: Skip Publish (No Token)
      if: ${{ !secrets.NPM_TOKEN }}
      run: echo "⚠️ NPM publish skipped - NPM_TOKEN not configured"

    - name: Create Release Tag
      if: success()
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a "cli-v${{ github.event.inputs.version }}" -m "CLI Release v${{ github.event.inputs.version }}"
        git push origin "cli-v${{ github.event.inputs.version }}"

  publish-sdk:
    name: Publish SDK to NPM
    runs-on: ubuntu-latest
    if: github.event.inputs.package == 'sdk' || github.event.inputs.package == 'both'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: |
        cd packages/lanonasis-sdk
        bun install --frozen-lockfile

    - name: Update version
      run: |
        cd packages/lanonasis-sdk
        npm version ${{ github.event.inputs.version }} --no-git-tag-version

    - name: Build SDK
      run: |
        cd packages/lanonasis-sdk
        bun run build

    - name: Run tests
      run: |
        cd packages/lanonasis-sdk
        bun run test

    - name: Publish to NPM
      if: ${{ secrets.NPM_TOKEN }}
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        cd packages/lanonasis-sdk
        echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > .npmrc
        npm publish --access public
    
    - name: Skip Publish (No Token)
      if: ${{ !secrets.NPM_TOKEN }}
      run: echo "⚠️ NPM publish skipped - NPM_TOKEN not configured"

    - name: Create Release Tag
      if: success()
      run: |
        git config user.name github-actions
        git config user.email github-actions@github.com
        git tag -a "sdk-v${{ github.event.inputs.version }}" -m "SDK Release v${{ github.event.inputs.version }}"
        git push origin "sdk-v${{ github.event.inputs.version }}"

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [publish-cli, publish-sdk]
    if: always() && (needs.publish-cli.result == 'success' || needs.publish-sdk.result == 'success')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate Release Notes
      id: release_notes
      run: |
        NOTES="${{ github.event.inputs.release_notes }}"
        if [ -z "$NOTES" ]; then
          NOTES="## Release v${{ github.event.inputs.version }}\n\n"
          if [ "${{ github.event.inputs.package }}" == "cli" ] || [ "${{ github.event.inputs.package }}" == "both" ]; then
            NOTES="${NOTES}### CLI Updates\n- Published @lanonasis/cli@${{ github.event.inputs.version }}\n\n"
          fi
          if [ "${{ github.event.inputs.package }}" == "sdk" ] || [ "${{ github.event.inputs.package }}" == "both" ]; then
            NOTES="${NOTES}### SDK Updates\n- Published @lanonasis/sdk@${{ github.event.inputs.version }}\n\n"
          fi
          NOTES="${NOTES}### Installation\n\`\`\`bash\n"
          if [ "${{ github.event.inputs.package }}" == "cli" ] || [ "${{ github.event.inputs.package }}" == "both" ]; then
            NOTES="${NOTES}npm install -g @lanonasis/cli@${{ github.event.inputs.version }}\n"
          fi
          if [ "${{ github.event.inputs.package }}" == "sdk" ] || [ "${{ github.event.inputs.package }}" == "both" ]; then
            NOTES="${NOTES}npm install @lanonasis/sdk@${{ github.event.inputs.version }}\n"
          fi
          NOTES="${NOTES}\`\`\`"
        fi
        echo "notes<<EOF" >> $GITHUB_OUTPUT
        echo -e "$NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        release_name: Release v${{ github.event.inputs.version }}
        body: ${{ steps.release_notes.outputs.notes }}
        draft: false
        prerelease: false

  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-latest
    needs: [publish-cli, publish-sdk]
    if: always() && secrets.SLACK_WEBHOOK
    
    steps:
    - name: Send notification
      uses: 8398a7/action-slack@v3
      with:
        status: custom
        custom_payload: |
          {
            text: "Package Publishing Results",
            attachments: [{
              color: '${{ (needs.publish-cli.result == 'success' || needs.publish-sdk.result == 'success') && 'good' || 'danger' }}',
              fields: [
                {
                  title: "Package",
                  value: "${{ github.event.inputs.package }}",
                  short: true
                },
                {
                  title: "Version",
                  value: "${{ github.event.inputs.version }}",
                  short: true
                },
                {
                  title: "CLI Status",
                  value: "${{ needs.publish-cli.result || 'skipped' }}",
                  short: true
                },
                {
                  title: "SDK Status",
                  value: "${{ needs.publish-sdk.result || 'skipped' }}",
                  short: true
                }
              ]
            }]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
    
    - name: Skip Slack Notification (No Token)
      if: ${{ !secrets.SLACK_WEBHOOK }}
      run: echo "⚠️ Slack notification skipped - SLACK_WEBHOOK not configured"